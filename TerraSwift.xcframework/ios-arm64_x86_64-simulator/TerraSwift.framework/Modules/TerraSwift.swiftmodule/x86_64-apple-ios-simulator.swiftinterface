// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TerraSwift
import Combine
import CoreLocation
import Foundation
import HealthKit
import Swift
import SwiftUI
@_exported import TerraSwift
import UIKit
import WebKit
import _Concurrency
public func connectTerra(dev_id: Swift.String, xAPIKey: Swift.String) -> Swift.String
public class Terra {
  @available(iOS 10.0, *)
  public init(user_id: Swift.String, dev_id: Swift.String, xAPIKey: Swift.String, auto: Swift.Bool = true, readTypes: Swift.Set<HealthKit.HKObjectType> = Set([HKObjectType.workoutType(),
                                                     HKObjectType.activitySummaryType(),
                                                     HKObjectType.quantityType(forIdentifier:.activeEnergyBurned)!,
                                                     HKQuantityType.quantityType(forIdentifier: .stepCount)!,
                                                     HKObjectType.quantityType(forIdentifier: .heartRate)!,
                                                     HKObjectType.quantityType(forIdentifier: .heartRateVariabilitySDNN)!,
                                                     HKObjectType.quantityType(forIdentifier: .vo2Max)!,
                                                     HKObjectType.quantityType(forIdentifier: .height)!,
                                                     HKObjectType.quantityType(forIdentifier: .appleExerciseTime)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyMass)!,
                                                     HKObjectType.quantityType(forIdentifier: .flightsClimbed)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyMassIndex)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyFatPercentage)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceSwimming)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceCycling)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceWalkingRunning)!,
                                                     HKObjectType.characteristicType(forIdentifier: .biologicalSex)!,
                                                     HKObjectType.characteristicType(forIdentifier: .dateOfBirth)!,
                                                     HKObjectType.quantityType(forIdentifier: .basalEnergyBurned)!,
                                                     HKObjectType.quantityType(forIdentifier: .swimmingStrokeCount)!,
                                                     HKObjectType.quantityType(forIdentifier: .restingHeartRate)!,
                                                     HKObjectType.quantityType(forIdentifier: .bloodPressureDiastolic)!,
                                                     HKObjectType.quantityType(forIdentifier: .bloodPressureSystolic)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyTemperature)!,
                                                     HKObjectType.quantityType(forIdentifier: .leanBodyMass)!,
                                                     HKObjectType.quantityType(forIdentifier: .oxygenSaturation)!,
                                                     HKObjectType.categoryType(forIdentifier: .sleepAnalysis)!,
                                                     HKObjectType.quantityType(forIdentifier: .respiratoryRate)!,
                                                     HKSeriesType.workoutRoute()
                                                    ]))
  public func getAthlete()
  public func getDaily(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date())
  public func getBody(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date())
  public func getSleep(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date())
  public func getWorkout(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date())
  @objc deinit
}
public func connectTerraWidget(dev_id: Swift.String, xAPIKey: Swift.String) -> Swift.String
extension Foundation.URL {
  public subscript(queryParam: Swift.String) -> Swift.String? {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct TerraWidget : SwiftUI.UIViewRepresentable, SwiftUI.View {
  @SwiftUI.ObservedObject @_projectedValueProperty($widget) @_Concurrency.MainActor(unsafe) public var widget: TerraSwift.WebViewTerra {
    get
    set
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $widget: SwiftUI.ObservedObject<TerraSwift.WebViewTerra>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(webViewTerra: TerraSwift.WebViewTerra)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<TerraSwift.TerraWidget>) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: WebKit.WKWebView, context: SwiftUI.UIViewRepresentableContext<TerraSwift.TerraWidget>)
  @_Concurrency.MainActor(unsafe) public func close()
  @objc public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
    public var widget: TerraSwift.WebViewTerra
    public init(_ widget: TerraSwift.WebViewTerra)
    @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> TerraSwift.TerraWidget.Coordinator
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
public class WebViewTerra : Foundation.ObservableObject {
  public init(dev_id: Swift.String, xAPIKey: Swift.String, additionalParams: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension Foundation.Date {
  public static func mondayAt12AM() -> Foundation.Date
  public static func todayAt12AM(date: Foundation.Date) -> Foundation.Date
  public static func convertToUTC(dateToConvert: Foundation.Date) -> Foundation.Date
}
extension Foundation.Date : Swift.Strideable {
  public func distance(to other: Foundation.Date) -> Foundation.TimeInterval
  public func advanced(by n: Foundation.TimeInterval) -> Foundation.Date
}
